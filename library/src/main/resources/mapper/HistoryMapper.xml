<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.mapper.HistoryMapper">

    <resultMap id="BaseResultMap" type="com.library.pojo.History">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <result property="uid" column="uid" jdbcType="INTEGER"/>
        <result property="bid" column="bid" jdbcType="INTEGER"/>
        <result property="wid" column="wid" jdbcType="INTEGER"/>
        <result property="begin_time" column="begin_time" jdbcType="TIMESTAMP"/>
        <result property="end_time" column="end_time" jdbcType="TIMESTAMP"/>
        <result property="times" column="times" jdbcType="INTEGER"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,uid,bid,wid,
        begin_time,end_time,
        times,status
    </sql>

    <select id="selectHistoryByUserId" resultType="com.library.pojo.History">
        select * from `history`
        where `history`.uid = #{uid}
        ORDER BY `status` ASC
    </select>

    <delete id="deleteHistoryById">
        delete
        from `history`
        where `history`.id = #{id}
    </delete>

    <!-- 获取借阅记录总数 -->
    <select id="selectHistoryCount" resultType="java.lang.Long">
        SELECT COUNT(*) FROM `history`
    </select>

    <!-- 分页查询借阅记录列表 -->
    <select id="selectHistoryPage" resultMap="BaseResultMap">
        SELECT * FROM `history`
        ORDER BY `status` ASC
        LIMIT #{page}, #{pageSize}
    </select>

    <select id="selectHistoryPageByUid" resultMap="BaseResultMap">
        SELECT * FROM `history`
        where `history`.uid = #{uid}
        ORDER BY `status` ASC
        LIMIT #{page}, #{pageSize}
    </select>

    <select id="selectHistoryById" resultType="com.library.pojo.History">
        select *
        from `history`
        where `history`.id = #{hid}
    </select>

    <select id="selectNoHistoryCountByUid" resultType="java.lang.Integer">
        select count(*)
        from `history`
        where `history`.uid = #{uid}
          and `history`.status = 0
    </select>

    <select id="selectHistoryCountByUid" resultType="java.lang.Integer">
        select count(*)
        from `history`
        where `history`.uid = #{uid}
    </select>

    <select id="selectMonthCountById" resultType="java.lang.Integer">
        select count(*)
        from `history`
        where `history`.uid = #{uid}
          and `history`.begin_time >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
    </select>

    <update id="UpdateHistoryStatusAndEndTimeById" parameterType="java.util.Map">
        update `history`
        set status = 1,
            end_time = NOW()
        where `history`.id = #{hid}
    </update>

    <update id="UpdateHistoryTimesAndEndTimeById" parameterType="java.lang.Integer">
        update `history`
        set times = times + 1,
            end_time = DATE_ADD(`history`.end_time, INTERVAL 1 MONTH)
        where `history`.id = #{hid}
    </update>



        <select id="selectIncome" resultType="java.lang.Integer">
            select count(*)
            from `history`
            where `history`.begin_time >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
        </select>

        <select id="orders" resultType="java.lang.Integer">
            SELECT COUNT(*)
            from `history`
        </select>

        <select id="warehouses" resultType="java.lang.Integer">
            SELECT count(*)
            FROM warehouse
        </select>

        <select id="users" resultType="java.lang.Integer">
            SELECT count(*)
            FROM `user`
        </select>

        <select id="selectTopUserId" resultType="java.lang.Integer">
            SELECT
                u.id
            FROM
                `history` h
                    JOIN
                user u ON h.uid = u.id
                    JOIN
                book b ON h.bid = b.id
            WHERE
                YEAR(h.begin_time) >= YEAR(CURDATE()) - 2
            GROUP BY
                u.id
            ORDER BY
                COUNT(h.id) DESC
                LIMIT
                7;
        </select>

        <select id="selectTopUserName" resultType="java.lang.String">
            SELECT
                u.username
            FROM
                `history` h
                    JOIN
                user u ON h.uid = u.id
                    JOIN
                book b ON h.bid = b.id
            WHERE
                YEAR(h.begin_time) >= YEAR(CURDATE()) - 2
            GROUP BY
                u.username
            ORDER BY
                COUNT(h.id) DESC
                LIMIT
                7;
        </select>

        <select id="selectOrdersByYearAndUserId" resultType="java.lang.Integer">
            SELECT COUNT(h.id) AS orders
            FROM `history` h
                     JOIN book b ON h.bid = b.id
            WHERE YEAR(h.begin_time) = #{year} AND h.uid = #{id}
        </select>

        <select id="selectTopBookId" resultType="java.lang.Integer">
            SELECT id
            FROM book_monthly_borrow_view
                LIMIT 9;
        </select>

    <select id="selectTopBookName" resultType="java.lang.String">
        SELECT bname
        FROM book_monthly_borrow_view
            LIMIT 9;
    </select>

    <select id="selectTopBookAuthor" resultType="java.lang.String">
        SELECT author
        FROM book_monthly_borrow_view
            LIMIT 9;
    </select>

    <select id="selectTopBookPress" resultType="java.lang.String">
        SELECT press
        FROM book_monthly_borrow_view
            LIMIT 9;
    </select>

    <select id="selectOrdersByYearMonthAndBookId" resultType="java.lang.Integer">
        SELECT
            CASE #{j}
                WHEN 0 THEN d
                WHEN 1 THEN c
                WHEN 2 THEN b
                WHEN 3 THEN a
                END AS orders
        FROM book_monthly_borrow_view
        WHERE id = #{id}
    </select>

    <select id="warn" resultType="com.library.response.historyResponse">
        select h.id,b.bname,b.author,b.press,w.location,h.begin_time,h.end_time,h.times
        from `history` h
                 JOIN
             `book` b ON h.bid = b.id
                 JOIN
            `user` u ON h.uid = u.id
                JOIN
            warehouse w ON h.wid = w.id
        where u.id = #{id} and h.status = 0 and (DATE_ADD(CURDATE(), INTERVAL 3 DAY) >= h.end_time)
        order by end_time asc
    </select>


</mapper>