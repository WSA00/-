<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.mapper.HistoryMapper">

    <resultMap id="BaseResultMap" type="com.library.pojo.History">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <id property="uid" column="uid" jdbcType="INTEGER"/>
        <id property="bid" column="bid" jdbcType="INTEGER"/>
        <id property="wid" column="wid" jdbcType="INTEGER"/>
        <result property="begin_time" column="begin_time" jdbcType="TIMESTAMP"/>
        <result property="end_time" column="end_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,uid,bid,wid,
        begin_time,end_time
    </sql>

    <!--    <update id="updateOrderById" parameterType="com.library.pojo.Order">-->
    <!--        UPDATE `order`-->
    <!--        SET productId = ${TableOrder.productId},-->
    <!--            userId = ${TableOrder.userId},-->
    <!--            warehouseId = ${TableOrder.warehouseId}-->
    <!--        WHERE id = ${TableOrder.Id}-->
    <!--    </update>-->


    <!--    <delete id="deleteOrderByProductId">-->
    <!--        delete-->
    <!--        from `order`-->
    <!--        where `order`.productId = #{productId}-->

    <!--    </delete>-->

    <!--    <delete id="deleteOrderByWarehouseId">-->
    <!--        delete-->
    <!--        from `order`-->
    <!--        where `order`.warehouseId = #{warehouseId}-->
    <!--    </delete>-->

    <delete id="deleteHistoryById">
        delete
        from `history`
        where `history`.id = #{id}
    </delete>

    <!-- 获取借阅记录总数 -->
    <select id="selectHistoryCount" resultType="java.lang.Long">
        SELECT COUNT(*) FROM `history`;
    </select>

    <!-- 分页查询借阅记录列表 -->
    <select id="selectHistoryPage" resultMap="BaseResultMap">
        SELECT * FROM `history`
        LIMIT #{page}, #{pageSize};
    </select>

    <select id="selectHistoryById" resultType="com.library.pojo.History">
        select *
        from `history`
        where `history`.id = #{hid}
    </select>

    <select id="selectHistoryCountByUid" resultType="java.lang.Integer">
        select count(*)
        from `history`
        where `history`.uid = #{uid}
    </select>

    <update id="UpdateHistoryStatusById" parameterType="java.lang.Integer">
        update `history`
        set status = 1
        where `history`.id = #{hid}
    </update>

    <update id="UpdateHistoryTimesById" parameterType="java.lang.Integer">
        update `history`
        set times = times + 1
        where `history`.id = #{hid}
    </update>
    <!--    <select id="selectIncome" resultType="java.lang.Double">-->
    <!--        SELECT ROUND(SUM(price),2)-->
    <!--        from `order` LEFT JOIN product-->
    <!--                               ON `order`.productId = product.id-->
    <!--    </select>-->

    <!--    <select id="sales" resultType="java.lang.Integer">-->
    <!--        SELECT COUNT(price)-->
    <!--        from `order` LEFT JOIN product-->
    <!--                               ON `order`.productId = product.id-->
    <!--    </select>-->

    <!--    <select id="warehouses" resultType="java.lang.Integer">-->
    <!--        SELECT count(*)-->
    <!--        FROM warehouse-->
    <!--    </select>-->

    <!--    <select id="users" resultType="java.lang.Integer">-->
    <!--        SELECT count(*)-->
    <!--        FROM user-->
    <!--    </select>-->

    <!--    <select id="selectTopUserId" resultType="java.lang.Integer">-->
    <!--        SELECT-->
    <!--            u.id-->
    <!--        FROM-->
    <!--            `order` o-->
    <!--                JOIN-->
    <!--            user u ON o.userId = u.id-->
    <!--                JOIN-->
    <!--            product p ON o.productId = p.id-->
    <!--        WHERE-->
    <!--            YEAR(o.createtime) >= YEAR(CURDATE()) - 4-->
    <!--        GROUP BY-->
    <!--            u.id-->
    <!--        ORDER BY-->
    <!--            ROUND(SUM(p.price),2) DESC-->
    <!--            LIMIT-->
    <!--            7;-->
    <!--    </select>-->
    <!--    <select id="selectTopUserName" resultType="java.lang.String">-->
    <!--        SELECT-->
    <!--            u.username-->
    <!--        FROM-->
    <!--            `order` o-->
    <!--                JOIN-->
    <!--            user u ON o.userId = u.id-->
    <!--                JOIN-->
    <!--            product p ON o.productId = p.id-->
    <!--        WHERE-->
    <!--            YEAR(o.createtime) >= YEAR(CURDATE()) - 4-->
    <!--        GROUP BY-->
    <!--            u.username-->
    <!--        ORDER BY-->
    <!--            ROUND(SUM(p.price),2) DESC-->
    <!--            LIMIT-->
    <!--            7;-->
    <!--    </select>-->

    <!--    <select id="selectSalesByYearAndUserId" resultType="java.lang.Double">-->
    <!--        SELECT ROUND(SUM(p.price),2) AS sales-->
    <!--        FROM `order` o-->
    <!--                 JOIN product p ON o.productId = p.id-->
    <!--        WHERE YEAR(o.createTime) = #{year} AND o.userId = #{id}-->

    <!--    </select>-->

    <!--    <select id="selectTopCarId" resultType="java.lang.Integer">-->
    <!--        SELECT-->
    <!--            p.id-->
    <!--        FROM-->
    <!--            `order` o-->
    <!--                JOIN-->
    <!--            product p ON o.productId = p.id-->
    <!--        WHERE-->
    <!--            YEAR(o.createtime) >= YEAR(CURDATE()) - 9-->
    <!--        GROUP BY-->
    <!--            p.id-->
    <!--        ORDER BY-->
    <!--            ROUND(SUM(p.price),2) DESC-->
    <!--            LIMIT-->
    <!--            7;-->
    <!--    </select>-->

    <!--    <select id="selectTopCarName" resultType="java.lang.String">-->
    <!--        SELECT-->
    <!--            p.`name`,p.id-->
    <!--        FROM-->
    <!--            `order` o-->
    <!--                JOIN-->
    <!--            product p ON o.productId = p.id-->
    <!--        WHERE-->
    <!--            YEAR(o.createtime) >= YEAR(CURDATE()) - 9-->
    <!--        GROUP BY-->
    <!--            p.id-->
    <!--        ORDER BY-->
    <!--            ROUND(SUM(p.price),2) DESC-->
    <!--            LIMIT-->
    <!--            7;-->
    <!--    </select>-->

    <!--    <select id="selectTopCarModel" resultType="java.lang.String">-->
    <!--        SELECT-->
    <!--            p.`model`,p.id-->
    <!--        FROM-->
    <!--            `order` o-->
    <!--                JOIN-->
    <!--            product p ON o.productId = p.id-->
    <!--        WHERE-->
    <!--            YEAR(o.createtime) >= YEAR(CURDATE()) - 9-->
    <!--        GROUP BY-->
    <!--            p.id-->
    <!--        ORDER BY-->
    <!--            ROUND(SUM(p.price),2) DESC-->
    <!--            LIMIT-->
    <!--            7;-->
    <!--    </select>-->

    <!--    <select id="selectSalesByYearAndCarId" resultType="java.lang.Integer">-->
    <!--        SELECT COUNT(*) AS sales-->
    <!--        FROM `order` o-->
    <!--                 JOIN product p ON o.productId = p.id-->
    <!--        WHERE YEAR(o.createTime) = #{year} AND o.productId = #{id}-->
    <!--    </select>-->

    <!--    <select id="selectOrderByUserId" resultType="com.library.response.UserOrderResponse">-->
    <!--        SELECT `order`.id ,product.`name`,product.model,warehouse.location,`order`.createtime-->
    <!--        FROM `order`,product,warehouse,`user`-->
    <!--        where `order`.productId=product.id and `order`.warehouseId=warehouse.id and `order`.userId=`user`.id AND `user`.id=#{userId}-->
    <!--    </select>-->

    <!--    <select id="countOrderByUserId" resultType="java.lang.Integer">-->
    <!--        select count(*)-->
    <!--        from `order`,`user`-->
    <!--        where `order`.userId=`user`.id and `user`.id=#{userId}-->
    <!--    </select>-->

    <!--    <select id="salesOrderByUserId" resultType="java.lang.Double">-->
    <!--        select round(sum(product.price),2)-->
    <!--        from `order`,`user`,product-->
    <!--        where `order`.userId=`user`.id and `order`.productId=product.id and `user`.id=#{userId}-->
    <!--    </select>-->

    <!--    <select id="AverageCountOrderByUserId" resultType="java.lang.Integer">-->
    <!--        SELECT-->
    <!--        round((SELECT COUNT(id) FROM `order`) / (SELECT COUNT(id) FROM `user`),0)-->
    <!--    </select>-->

    <!--    <select id="AverageSalesOrderByUserId" resultType="java.lang.Double">-->
    <!--        SELECT-->
    <!--        round((SELECT SUM(product.price) FROM `order`,product WHERE `order`.productId=product.id) / (SELECT COUNT(id) FROM `user`),0)-->
    <!--    </select>-->
</mapper>